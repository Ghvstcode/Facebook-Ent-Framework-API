// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/GhvstCode/LR-ENT/ent/notes"

	"github.com/facebook/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeNotes = "Notes"
)

// NotesMutation represents an operation that mutate the NotesSlice
// nodes in the graph.
type NotesMutation struct {
	config
	op            Op
	typ           string
	id            *int
	_Title        *string
	_Content      *string
	_Private      *bool
	created_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Notes, error)
}

var _ ent.Mutation = (*NotesMutation)(nil)

// notesOption allows to manage the mutation configuration using functional options.
type notesOption func(*NotesMutation)

// newNotesMutation creates new mutation for $n.Name.
func newNotesMutation(c config, op Op, opts ...notesOption) *NotesMutation {
	m := &NotesMutation{
		config:        c,
		op:            op,
		typ:           TypeNotes,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNotesID sets the id field of the mutation.
func withNotesID(id int) notesOption {
	return func(m *NotesMutation) {
		var (
			err   error
			once  sync.Once
			value *Notes
		)
		m.oldValue = func(ctx context.Context) (*Notes, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Notes.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNotes sets the old Notes of the mutation.
func withNotes(node *Notes) notesOption {
	return func(m *NotesMutation) {
		m.oldValue = func(context.Context) (*Notes, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NotesMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NotesMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *NotesMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetTitle sets the Title field.
func (m *NotesMutation) SetTitle(s string) {
	m._Title = &s
}

// Title returns the Title value in the mutation.
func (m *NotesMutation) Title() (r string, exists bool) {
	v := m._Title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old Title value of the Notes.
// If the Notes object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *NotesMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTitle is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle reset all changes of the "Title" field.
func (m *NotesMutation) ResetTitle() {
	m._Title = nil
}

// SetContent sets the Content field.
func (m *NotesMutation) SetContent(s string) {
	m._Content = &s
}

// Content returns the Content value in the mutation.
func (m *NotesMutation) Content() (r string, exists bool) {
	v := m._Content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old Content value of the Notes.
// If the Notes object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *NotesMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldContent is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent reset all changes of the "Content" field.
func (m *NotesMutation) ResetContent() {
	m._Content = nil
}

// SetPrivate sets the Private field.
func (m *NotesMutation) SetPrivate(b bool) {
	m._Private = &b
}

// Private returns the Private value in the mutation.
func (m *NotesMutation) Private() (r bool, exists bool) {
	v := m._Private
	if v == nil {
		return
	}
	return *v, true
}

// OldPrivate returns the old Private value of the Notes.
// If the Notes object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *NotesMutation) OldPrivate(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPrivate is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPrivate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrivate: %w", err)
	}
	return oldValue.Private, nil
}

// ResetPrivate reset all changes of the "Private" field.
func (m *NotesMutation) ResetPrivate() {
	m._Private = nil
}

// SetCreatedAt sets the created_at field.
func (m *NotesMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the created_at value in the mutation.
func (m *NotesMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old created_at value of the Notes.
// If the Notes object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *NotesMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt reset all changes of the "created_at" field.
func (m *NotesMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Op returns the operation name.
func (m *NotesMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Notes).
func (m *NotesMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *NotesMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m._Title != nil {
		fields = append(fields, notes.FieldTitle)
	}
	if m._Content != nil {
		fields = append(fields, notes.FieldContent)
	}
	if m._Private != nil {
		fields = append(fields, notes.FieldPrivate)
	}
	if m.created_at != nil {
		fields = append(fields, notes.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *NotesMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case notes.FieldTitle:
		return m.Title()
	case notes.FieldContent:
		return m.Content()
	case notes.FieldPrivate:
		return m.Private()
	case notes.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *NotesMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case notes.FieldTitle:
		return m.OldTitle(ctx)
	case notes.FieldContent:
		return m.OldContent(ctx)
	case notes.FieldPrivate:
		return m.OldPrivate(ctx)
	case notes.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Notes field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *NotesMutation) SetField(name string, value ent.Value) error {
	switch name {
	case notes.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case notes.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case notes.FieldPrivate:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrivate(v)
		return nil
	case notes.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Notes field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *NotesMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *NotesMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *NotesMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Notes numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *NotesMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *NotesMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *NotesMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Notes nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *NotesMutation) ResetField(name string) error {
	switch name {
	case notes.FieldTitle:
		m.ResetTitle()
		return nil
	case notes.FieldContent:
		m.ResetContent()
		return nil
	case notes.FieldPrivate:
		m.ResetPrivate()
		return nil
	case notes.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Notes field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *NotesMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *NotesMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *NotesMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *NotesMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *NotesMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *NotesMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *NotesMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Notes unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *NotesMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Notes edge %s", name)
}
