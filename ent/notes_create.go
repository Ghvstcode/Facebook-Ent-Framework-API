// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/GhvstCode/LR-ENT/ent/notes"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// NotesCreate is the builder for creating a Notes entity.
type NotesCreate struct {
	config
	mutation *NotesMutation
	hooks    []Hook
}

// SetTitle sets the Title field.
func (nc *NotesCreate) SetTitle(s string) *NotesCreate {
	nc.mutation.SetTitle(s)
	return nc
}

// SetContent sets the Content field.
func (nc *NotesCreate) SetContent(s string) *NotesCreate {
	nc.mutation.SetContent(s)
	return nc
}

// SetPrivate sets the Private field.
func (nc *NotesCreate) SetPrivate(b bool) *NotesCreate {
	nc.mutation.SetPrivate(b)
	return nc
}

// SetNillablePrivate sets the Private field if the given value is not nil.
func (nc *NotesCreate) SetNillablePrivate(b *bool) *NotesCreate {
	if b != nil {
		nc.SetPrivate(*b)
	}
	return nc
}

// SetCreatedAt sets the created_at field.
func (nc *NotesCreate) SetCreatedAt(t time.Time) *NotesCreate {
	nc.mutation.SetCreatedAt(t)
	return nc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (nc *NotesCreate) SetNillableCreatedAt(t *time.Time) *NotesCreate {
	if t != nil {
		nc.SetCreatedAt(*t)
	}
	return nc
}

// Mutation returns the NotesMutation object of the builder.
func (nc *NotesCreate) Mutation() *NotesMutation {
	return nc.mutation
}

// Save creates the Notes in the database.
func (nc *NotesCreate) Save(ctx context.Context) (*Notes, error) {
	var (
		err  error
		node *Notes
	)
	nc.defaults()
	if len(nc.hooks) == 0 {
		if err = nc.check(); err != nil {
			return nil, err
		}
		node, err = nc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NotesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nc.check(); err != nil {
				return nil, err
			}
			nc.mutation = mutation
			node, err = nc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(nc.hooks) - 1; i >= 0; i-- {
			mut = nc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (nc *NotesCreate) SaveX(ctx context.Context) *Notes {
	v, err := nc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (nc *NotesCreate) defaults() {
	if _, ok := nc.mutation.Private(); !ok {
		v := notes.DefaultPrivate
		nc.mutation.SetPrivate(v)
	}
	if _, ok := nc.mutation.CreatedAt(); !ok {
		v := notes.DefaultCreatedAt()
		nc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nc *NotesCreate) check() error {
	if _, ok := nc.mutation.Title(); !ok {
		return &ValidationError{Name: "Title", err: errors.New("ent: missing required field \"Title\"")}
	}
	if _, ok := nc.mutation.Content(); !ok {
		return &ValidationError{Name: "Content", err: errors.New("ent: missing required field \"Content\"")}
	}
	if _, ok := nc.mutation.Private(); !ok {
		return &ValidationError{Name: "Private", err: errors.New("ent: missing required field \"Private\"")}
	}
	if _, ok := nc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	return nil
}

func (nc *NotesCreate) sqlSave(ctx context.Context) (*Notes, error) {
	_node, _spec := nc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (nc *NotesCreate) createSpec() (*Notes, *sqlgraph.CreateSpec) {
	var (
		_node = &Notes{config: nc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: notes.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: notes.FieldID,
			},
		}
	)
	if value, ok := nc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: notes.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := nc.mutation.Content(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: notes.FieldContent,
		})
		_node.Content = value
	}
	if value, ok := nc.mutation.Private(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: notes.FieldPrivate,
		})
		_node.Private = value
	}
	if value, ok := nc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: notes.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	return _node, _spec
}

// NotesCreateBulk is the builder for creating a bulk of Notes entities.
type NotesCreateBulk struct {
	config
	builders []*NotesCreate
}

// Save creates the Notes entities in the database.
func (ncb *NotesCreateBulk) Save(ctx context.Context) ([]*Notes, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ncb.builders))
	nodes := make([]*Notes, len(ncb.builders))
	mutators := make([]Mutator, len(ncb.builders))
	for i := range ncb.builders {
		func(i int, root context.Context) {
			builder := ncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NotesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ncb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ncb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (ncb *NotesCreateBulk) SaveX(ctx context.Context) []*Notes {
	v, err := ncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
